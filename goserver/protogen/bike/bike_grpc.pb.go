// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: bike.proto

package bike

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bike_GetStationList_FullMethodName           = "/Bike/GetStationList"
	Bike_GetRealTimeStationStatus_FullMethodName = "/Bike/GetRealTimeStationStatus"
)

// BikeClient is the client API for Bike service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BikeClient interface {
	GetStationList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StationList, error)
	GetRealTimeStationStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StationStatus], error)
}

type bikeClient struct {
	cc grpc.ClientConnInterface
}

func NewBikeClient(cc grpc.ClientConnInterface) BikeClient {
	return &bikeClient{cc}
}

func (c *bikeClient) GetStationList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StationList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StationList)
	err := c.cc.Invoke(ctx, Bike_GetStationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeClient) GetRealTimeStationStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StationStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Bike_ServiceDesc.Streams[0], Bike_GetRealTimeStationStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, StationStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bike_GetRealTimeStationStatusClient = grpc.ServerStreamingClient[StationStatus]

// BikeServer is the server API for Bike service.
// All implementations must embed UnimplementedBikeServer
// for forward compatibility.
type BikeServer interface {
	GetStationList(context.Context, *emptypb.Empty) (*StationList, error)
	GetRealTimeStationStatus(*emptypb.Empty, grpc.ServerStreamingServer[StationStatus]) error
	mustEmbedUnimplementedBikeServer()
}

// UnimplementedBikeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBikeServer struct{}

func (UnimplementedBikeServer) GetStationList(context.Context, *emptypb.Empty) (*StationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationList not implemented")
}
func (UnimplementedBikeServer) GetRealTimeStationStatus(*emptypb.Empty, grpc.ServerStreamingServer[StationStatus]) error {
	return status.Errorf(codes.Unimplemented, "method GetRealTimeStationStatus not implemented")
}
func (UnimplementedBikeServer) mustEmbedUnimplementedBikeServer() {}
func (UnimplementedBikeServer) testEmbeddedByValue()              {}

// UnsafeBikeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BikeServer will
// result in compilation errors.
type UnsafeBikeServer interface {
	mustEmbedUnimplementedBikeServer()
}

func RegisterBikeServer(s grpc.ServiceRegistrar, srv BikeServer) {
	// If the following call pancis, it indicates UnimplementedBikeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bike_ServiceDesc, srv)
}

func _Bike_GetStationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServer).GetStationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bike_GetStationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServer).GetStationList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bike_GetRealTimeStationStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BikeServer).GetRealTimeStationStatus(m, &grpc.GenericServerStream[emptypb.Empty, StationStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bike_GetRealTimeStationStatusServer = grpc.ServerStreamingServer[StationStatus]

// Bike_ServiceDesc is the grpc.ServiceDesc for Bike service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bike_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bike",
	HandlerType: (*BikeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStationList",
			Handler:    _Bike_GetStationList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRealTimeStationStatus",
			Handler:       _Bike_GetRealTimeStationStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bike.proto",
}
